{"version":3,"sources":["api/api.ts","api/posts.ts","store/actions.ts","components/PostsList/PostsList.tsx","store/selectors.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","store/index.ts","index.tsx"],"names":["BASE_URL","getPosts","userId","fetch","then","response","json","LOAD_POSTS","CHANGE_USER","LOAD_USERS","CHANGE_POST","LOAD_COMMENTS","CHANGE_NAME","CHANGE_EMAIL","CHANGE_COMMENT_BODY","CHANGE_COMMENTS_VISIBILITY","changePostAction","payload","type","loadCommentsAction","PostsList","props","dispatch","useDispatch","postId","posts","useEffect","loadPostsFromServer","a","postsFromServer","className","map","post","title","id","onClick","getPostsSelector","state","getUserIdSelector","getUsersSelector","users","getPostIdSelector","getCommentsSelector","comments","getNewCommentSelector","newComment","getCommentsVisibilitySelector","isCommentsHidden","getComments","addComment","name","email","body","method","headers","JSON","stringify","NewCommentForm","useSelector","handleSubmit","event","preventDefault","onSubmit","placeholder","value","onChange","target","PostDetails","loadCommentsFromServer","commentsFromServer","handleRemoveComment","comment","commentId","find","length","App","loadUsersFromServer","usersFromServer","htmlFor","user","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55f82882.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPosts = (userId: number) => {\n  if (userId !== 0) {\n    return fetch(`${BASE_URL}/posts?userId=${userId}`)\n      .then(response => response.json());\n  }\n\n  return fetch(`${BASE_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(response => response.json());\n};\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const CHANGE_USER = 'CHANGE_USER';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const CHANGE_POST = 'CHANGE_POST';\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport const CHANGE_NAME = 'CHANGE_NAME';\nexport const CHANGE_EMAIL = 'CHANGE_EMAIL';\nexport const CHANGE_COMMENT_BODY = 'CHANGE_COMMENT_BODY';\nexport const CHANGE_COMMENTS_VISIBILITY = 'CHANGE_COMMENTS_VISIBILITY';\n\nexport const loadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const changeUserIdAction = (payload: number) => ({\n  type: CHANGE_USER,\n  payload,\n});\n\nexport const loadUsersAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n\nexport const changePostAction = (payload: number) => ({\n  type: CHANGE_POST,\n  payload,\n});\n\nexport const loadCommentsAction = (payload: Comment[]) => ({\n  type: LOAD_COMMENTS,\n  payload,\n});\n\nexport const changeNameAction = (payload: string) => ({\n  type: CHANGE_NAME,\n  payload,\n});\n\nexport const changeEmailAction = (payload: string) => ({\n  type: CHANGE_EMAIL,\n  payload,\n});\n\nexport const changeCommentBodyAction = (payload: string) => ({\n  type: CHANGE_COMMENT_BODY,\n  payload,\n});\n\nexport const changeCommentsVisibilityAction = (payload: boolean) => ({\n  type: CHANGE_COMMENTS_VISIBILITY,\n  payload,\n});\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch } from 'react-redux';\nimport { getPosts } from '../../api/posts';\nimport { changePostAction, loadPostsAction } from '../../store/actions';\n\ntype Props = {\n  postId: number,\n  posts: Post[],\n  userId: number,\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { postId, posts, userId } = props;\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await getPosts(userId);\n\n      dispatch(loadPostsAction(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {postId !== post.id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => dispatch(changePostAction(post.id))}\n                >\n                  Open\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => dispatch(changePostAction(0))}\n                >\n                  Close\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getUserIdSelector = (state: State) => state.userId;\nexport const getUsersSelector = (state: State) => state.users;\nexport const getPostIdSelector = (state: State) => state.postId;\nexport const getCommentsSelector = (state: State) => state.comments;\nexport const getNewCommentSelector = (state: State) => state.newComment;\nexport const getCommentsVisibilitySelector = (state: State) => state.isCommentsHidden;\n","import { BASE_URL } from './api';\n\nexport const getComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\nexport const addComment = (postId: number, newComment: NewComment) => {\n  const { name, email, body } = newComment;\n\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addComment, getComments } from '../../api/comments';\nimport {\n  changeCommentBodyAction,\n  changeEmailAction,\n  changeNameAction,\n  loadCommentsAction,\n} from '../../store/actions';\nimport { getNewCommentSelector } from '../../store/selectors';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const newComment = useSelector(getNewCommentSelector);\n  const { postId } = props;\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    await addComment(postId, newComment);\n    dispatch(loadCommentsAction(await getComments(postId)));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={(event) => dispatch(changeNameAction(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={(event) => dispatch(changeEmailAction(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          onChange={(event) => dispatch(changeCommentBodyAction(event.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, getComments } from '../../api/comments';\nimport { changeCommentsVisibilityAction, loadCommentsAction } from '../../store/actions';\nimport { getCommentsSelector, getCommentsVisibilitySelector } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n  posts: Post[],\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { postId, posts } = props;\n  const comments = useSelector(getCommentsSelector);\n  const isCommentsHidden = useSelector(getCommentsVisibilitySelector);\n\n  useEffect(() => {\n    const loadCommentsFromServer = async () => {\n      const commentsFromServer = await getComments(postId);\n\n      dispatch(loadCommentsAction(commentsFromServer));\n    };\n\n    loadCommentsFromServer();\n  }, [postId]);\n\n  const handleRemoveComment = async (comment: Comment) => {\n    await deleteComment(comment.id);\n\n    dispatch(loadCommentsAction(await getComments(postId)));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {!!postId && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{posts.find(post => post.id === postId)?.title}</p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => dispatch(changeCommentsVisibilityAction(isCommentsHidden))}\n            >\n              {!isCommentsHidden ? `Hide ${comments.length} comments`\n                : `Show ${comments.length} comments`}\n            </button>\n            {!isCommentsHidden\n              && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li className=\"PostDetails__list-item\" key={comment.id}>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => handleRemoveComment(comment)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.name}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n          </section>\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm postId={postId} />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './styles/general.scss';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList/PostsList';\nimport {\n  getPostIdSelector,\n  getPostsSelector,\n  getUserIdSelector,\n  getUsersSelector,\n} from './store/selectors';\nimport { getUsers } from './api/users';\nimport { changeUserIdAction, loadUsersAction } from './store/actions';\nimport { PostDetails } from './components/PostDetails/PostDetails';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const userId = useSelector(getUserIdSelector);\n  const users = useSelector(getUsersSelector);\n  const postId = useSelector(getPostIdSelector);\n  const posts = useSelector(getPostsSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      dispatch(loadUsersAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-selector\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            value={userId}\n            onChange={(event) => {\n              dispatch(changeUserIdAction(+event.target.value));\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map((user) => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList postId={postId} posts={posts} userId={userId} />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails postId={postId} posts={posts} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport const getUsers = () => {\n  return fetch(`${BASE_URL}/users`)\n    .then(response => response.json());\n};\n","import { createStore } from 'redux';\nimport {\n  CHANGE_COMMENTS_VISIBILITY,\n  CHANGE_COMMENT_BODY,\n  CHANGE_EMAIL,\n  CHANGE_NAME,\n  CHANGE_POST,\n  CHANGE_USER,\n  LOAD_COMMENTS,\n  LOAD_POSTS,\n  LOAD_USERS,\n} from './actions';\n\nconst initialState: State = {\n  posts: [],\n  userId: 0,\n  users: [],\n  postId: 0,\n  comments: [],\n  newComment: {\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  },\n  isCommentsHidden: false,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case CHANGE_USER:\n      return {\n        ...state,\n        userId: action.payload,\n      };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payload],\n      };\n\n    case CHANGE_POST:\n      return {\n        ...state,\n        postId: action.payload,\n      };\n\n    case LOAD_COMMENTS:\n      return {\n        ...state,\n        comments: [...action.payload],\n      };\n\n    case CHANGE_NAME:\n      return {\n        ...state,\n        newComment: {\n          ...state.newComment,\n          name: action.payload,\n        },\n      };\n\n    case CHANGE_EMAIL:\n      return {\n        ...state,\n        newComment: {\n          ...state.newComment,\n          email: action.payload,\n        },\n      };\n\n    case CHANGE_COMMENT_BODY:\n      return {\n        ...state,\n        newComment: {\n          ...state.newComment,\n          body: action.payload,\n        },\n      };\n\n    case CHANGE_COMMENTS_VISIBILITY:\n      return {\n        ...state,\n        isCommentsHidden: !action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}